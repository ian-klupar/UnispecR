NDVI_MODIS = col_double(),
EVI_MODIS = col_double(),
EVI2_MODIS = col_double(),
PRI_550 = col_double(),
PRI_570 = col_double(),
WBI = col_double(),
Chl = col_double(),
LAI = col_double()
))
indices <- index_summary %>%
mutate(DOY = as.integer(DOY)) %>%
select(-SCAN_ID) %>%
rename(NDVI = NDVI_MODIS,
EVI = EVI_MODIS,
EVI2 = EVI2_MODIS)
# Load data from 2006-2018 ------------------------------------------------
load("LTER_R/unispec_index_summary_dataframe.Rda")
# Load data from 2006-2018 ------------------------------------------------
load(paste0(data_path, "/unispec_index_summary_dataframe.Rda")
# Load data from 2006-2018 ------------------------------------------------
load(paste0(data_path, "/unispec_index_summary_dataframe.Rda"))
# Load data from 2006-2018 ------------------------------------------------
load(paste0(data_path, "/unispec_index_summary_dataframe.Rda"))
# Load data from 2006-2018 ------------------------------------------------
load(paste0(data_path, "/unispec_index_summary_dataframe.Rda"))
# Load data from 2006-2018 ------------------------------------------------
load(paste0(data_path, "/unispec_indices_summary_dataframe.Rda"))
# REQUIRED PACKAGES -------------------------------------------------------
require(tidyverse)
require(stringr)
require(lubridate)
# FUNCTIONS ---------------------------------------------------------------
source("unispec_functions.R")
# SET DIRECTORY ------------------------------------------------------------
data_path <- getwd()
## Useful vectors for standardizing names and filtering rows
WSG <- c("WSG1", "WSG23")
SHB <- c("SHB1", "SHB2")
site_list <- list("MAT", "LMAT", "MNAT", "NANT", "DHT", WSG, SHB, "HST")
CT <- c("CT","CT1","CT2")
NP_gradient <- c("F0.5","F1","F2","F5","F10") # for LOF site
N_types <- c("NO3", "NH4") # for LOF site
trtmt_list <- list(CT, "N", "P", "NP", NP_gradient, N_types)
## Find all file keys
### alter search pattern to choose specific key(s)
key_files <- list.files(path = data_path, pattern = "*_key.csv", full.names = T, recursive = T)
## Read in data from filekeys
key_list <- data_frame(keyname = key_files) %>% # create dataframe
mutate(key_contents = map(keyname, function(x) read_key_file(x)))
## Unpack into usable dataframe
keys <- unnest(key_list)
keys
key_list
## Find .spu files
### alter data_path or specify Date(s) or Site(s) to read files
files <- list.files(path = data_path, pattern = ".spu$", full.names = FALSE, recursive=T)
## Read data from files
data_list <- data_frame(filename = files) %>% # create dataframe
mutate(file_contents = map(filename, function(x) read_spu_file(x)))
## Unpack into usable dataframe
data <- unnest(data_list)
## Join all data matching keys dataframe (drops any non-matching data),
##  by columns (Date, Site, FileNum)
df <- inner_join(data, keys) %>%
filter(Wavelength >= 500 & Wavelength <= 1000) # Choose relevent wavelengths
## Find all white reference files
ref_data <- df %>%
filter(str_detect(Treatment, "REF"))%>% # extract reference data
separate(Block, into = c("BX1", "BX2", "BX3", "BX4"), sep = ",") %>% # expand string entry in "Block", necessary if different ref for different blocks at same site
gather(Block, BlockString, BX1:BX4) %>% # re-condense into one column
mutate(Block = str_squish(BlockString), BlockString=NULL) %>% # remove whitespace from Block names introduced by "separate" function
filter(!is.na(Block)) %>% # remove empty rows for site w/out B3 or B4
mutate(CorrectionFactor_REF = ChA/ChB)
## Plot ALL Correction Factors for quality check
ggplot(data = ref_data, mapping = aes(x = Wavelength, y = CorrectionFactor_REF)) +
geom_line(aes(color=Treatment, linetype=Measurement, alpha=Block)) +
facet_grid(Site ~ Date) +
scale_alpha_discrete(range=c(1, 0.5)) # transparency by block
## Choose references (usually 5 measurements per date/site)
sites <- unlist(site_list)
sites <- sites[which(!(sites %in% c("MNAT", "SHB1")))] # not MNAT or SHB1
dates <- df %>% select(Date) %>% unique() %>% slice(1:n()) %>% c()
dates <- dates[[1]]
ref_check <- ref_data %>%
filter(Date %in% dates) %>%
filter(Site %in% sites)  %>%
### FURTHER SPECIFY EXACT SITE/DATE/ETC to INVESTIGATE FURTHER
filter(Site == "LMAT")
## Replot Specified Correction Factors for quality check
ggplot(data = ref_check, mapping = aes(x = Wavelength, y = CorrectionFactor_REF)) +
geom_line(aes(color=Treatment, linetype=Measurement, alpha=Block)) +
facet_grid(Site ~ Date) +
scale_alpha_discrete(range=c(1, 0.25))
## EXAMINE SPECIFIC info: check Integration, Notes, Weather, filename, etc.
ref_check_files <- ref_check %>%
select(-c(Wavelength, ChA, ChB, CorrectionFactor_REF, keyname, Time)) %>%
unique()
### View dataframe of ref_check_files
ref_check_files
## Find & choose reference data
ref_data <- df %>%
filter(Treatment == "REF") %>% # NOTE CHANGE From "str_detect()" to "=="
separate(Block, into = c("BX1", "BX2", "BX3", "BX4"), sep = ",") %>% # expand string entry in "Block", necessary if different ref for different blocks at same site
gather(Block, BlockString, BX1:BX4) %>% # re-condense into one column
mutate(Block = str_squish(BlockString), BlockString=NULL) %>% # remove whitespace from Block names introduced by "separate" function
filter(!is.na(Block)) %>% # remove empty rows for site w/out B3 or B4
mutate(CorrectionFactor_REF = ChA/ChB)
## Summarize 5 chosen references measurements (and integrations)
ref_summary <- ref_data %>%
group_by(Date,Site,Block,Wavelength) %>% # group_by(Date,Site,Block,Wavelength, int) %>%
summarize(ChA_REF = mean(ChA), ChB_REF = mean(ChB), CorrectionFactor_REF = mean(ChA/ChB), int_REF = mean(int), Notes_REF = list(Notes))
# CHECK ALL unique DATES/SITES/BLOCKS ARE ACCOUNTED FOR POST SUMMARY
cover_check <- ref_data %>%
select(Date, Site, Block, Wavelength) %>%
unique() %>%
arrange(Site, Block, Wavelength)
if(nrow(cover_check) == nrow(ref_summary)){print("ALL IS WELL. ref_summary is comprehensive.")}
# JOIN with DATA
## Tidy dataframe
df_tidy <- df %>%
mutate(Site = replace(Site, Site %in% WSG, "WSG")) %>% # tidy : combine WSG1 & WSG23
mutate(Site = replace(Site, Site %in% SHB, "SHB"))  # tidy : combine SHB1 & SHB2
df_ref <- inner_join(df_tidy, ref_summary) %>%
select(Date, Time, Site, Block, Treatment, Measurement, Wavelength,  int, int_REF, ChB, ChA, ChB_REF, ChA_REF, CorrectionFactor_REF, Weather, Notes, Notes_REF, filename, FileNum, keyname) %>%
mutate(raw = ChB/ChA) %>%
mutate(correct = raw*CorrectionFactor_REF) %>%
gather(Type, Reflectance, raw:correct)
# CHECK ALL MEASUREMENTS ARE ACCOUNTED FOR post join
cover <- df_ref %>%
select(Date, Site, Block,Treatment,Measurement, Wavelength) %>%
unique() %>%
arrange(Date, Site, Block, Treatment, Measurement)
## Replot Specified Correction Factors for quality check
ggplot(data = ref_summary, mapping = aes(x = Wavelength, y = CorrectionFactor_REF)) +
geom_line(aes(color=Treatment, linetype=Measurement, alpha=Block)) +
facet_grid(Site ~ Date) +
scale_alpha_discrete(range=c(1, 0.25))
## Replot Specified Correction Factors for quality check
ggplot(data = ref_summary, mapping = aes(x = Wavelength, y = CorrectionFactor_REF)) +
geom_line(aes(color=Block, linetype=Measurement, alpha=Block)) +
facet_grid(Site ~ Date) +
scale_alpha_discrete(range=c(1, 0.25))
## Replot Specified Correction Factors for quality check
ggplot(data = ref_summary, mapping = aes(x = Wavelength, y = CorrectionFactor_REF)) +
geom_line(aes(color=Block, alpha=Block)) +
facet_grid(Site ~ Date) +
scale_alpha_discrete(range=c(1, 0.25))
# SPECIFY DESIRED FOLDER
data_path <- "UnispecData/2018-07-14/"
# Specify which site and what filenumbers you want to analyze
siteID <- "^MNAT_*" #regular expression for which files you want
# SPECIFY DESIRED FOLDER
data_path <- "UnispecData/2018-07-14/"
# Specify which site and what filenumbers you want to analyze
siteID <- "^MNAT_*" #regular expression for which files you want
first <- 0
last <- 5000
fileList <- list.files(path = data_path, pattern = siteID, full.names = FALSE, recursive=T)
fileNums <- as.numeric(gsub("^.*_([0-9]+)\\..*","\\1", fileList))
subfileNums <- fileNums >= first & fileNums <= last
files <- fileList[subfileNums]
# Read in Data
data_list <- data_frame(filename = files) %>% # create dataframe
mutate(file_contents = map(filename, function(x) read_spu_file(x)))
# SPECIFY DESIRED FOLDER
data_path <- "UnispecData/2018-07-14/"
# Specify which site and what filenumbers you want to analyze
siteID <- "^MNAT_*" #regular expression for which files you want
first <- 0
last <- 5000
fileList <- list.files(path = data_path, pattern = siteID, full.names = FALSE, recursive=T)
fileNums <- as.numeric(gsub("^.*_([0-9]+)\\..*","\\1", fileList))
subfileNums <- fileNums >= first & fileNums <= last
files <- fileList[subfileNums]
# Read in Data
data_list <- data_frame(filename = files) %>% # create dataframe
mutate(file_contents = map(filename, function(x) read_spu_file(x)))
files
fileNums
fileList
# Read in Data
data_list <- data_frame(filename = paste0(data_path, files) %>% # create dataframe
# Read in Data
data_list <- data_frame(filename = paste0(data_path, files)) %>% # create dataframe
mutate(file_contents = map(filename, function(x) read_spu_file(x)))
# Read in Data
data_list <- data_frame(filename = paste0(data_path, files)) %>% # create dataframe
mutate(file_contents = map(filename, function(x) read_spu_file(x)))
data <- unnest(data_list)
# Select columns to Check
timedata <- data %>% select(Site, Date, FileNum, Time, int) %>%
group_by(Time) %>% distinct()
timedata$diff <- timedata$Time - lag(timedata$Time)
time_check <- timedata %>% select(Site, Time, FileNum, diff, int) #%>% filter(FileNum>=0 & FileNum <=15)
# Examine dataframe
time_check
## PLOT Specific Files
plotdata <- data %>%
filter(Wavelength > 500 & Wavelength < 1000) %>%
## Choose file subset
filter(FileNum >= 0 & FileNum <= 20) %>%
mutate(FileNum = factor(FileNum))
ggplot(data=plotdata, aes(x=Wavelength, y=Reflectance)) +
geom_line(aes(color=FileNum)) +
facet_wrap(~FileNum)
data
ggplot(data=plotdata, aes(x=Wavelength, y=ChB/ChA)) +
geom_line(aes(color=FileNum)) +
facet_wrap(~FileNum)
## Check for Max'd out Spectra
bad_data <- data %>% filter(ChA > 65000) %>%
group_by(Date, Site, FileNum) %>% unique()
bad_data
## Check for Max'd out Spectra
bad_data <- data %>% filter(ChA > 5000) %>%
group_by(Date, Site, FileNum) %>% unique()
## Check for Max'd out Spectra
bad_data <- data %>% filter(ChA > 65000) %>%
group_by(Date, Site, FileNum) %>% unique()
## Useful vectors for standardizing names and filtering rows
WSG <- c("WSG1", "WSG23")
SHB <- c("SHB1", "SHB2")
site_list <- list("MAT", "LMAT", "MNAT", "NANT", "DHT", WSG, SHB, "HST")
CT <- c("CT","CT1","CT2")
NP_gradient <- c("F0.5","F1","F2","F5","F10")
N_types <- c("NO3", "NH4")
trtmt_list <- list(CT, "N", "P", "NP", NP_gradient, N_types)
# SET DIRECTORY ------------------------------------------------------------
data_path <- getwd()
# FUNCTIONS ---------------------------------------------------------------
source("unispec_functions.R")
## Find all file keys
### alter search pattern to choose specific key(s)
key_files <- list.files(path = data_path, pattern = "*_key.csv", full.names = T, recursive = T)
## Read in data from filekeys
key_list <- data_frame(keyname = key_files) %>% # create dataframe
mutate(key_contents = map(keyname, function(x) read_key_file(x)))
## Unpack into usable dataframe
keys <- unnest(key_list)
## Find .spu files
### alter data_path directory or search pattern to specify files
files <- list.files(path = data_path, pattern = ".spu$", full.names = FALSE, recursive=T)
## Read data from files
data_list <- data_frame(filename = files) %>% # create dataframe
mutate(file_contents = map(filename, function(x) read_spu_file(x)))
## Unpack into usable dataframe
data <- unnest(data_list)
## Join all data matching keys dataframe (drops any non-matching data),
##  by columns (Date, Site, FileNum)
df <- inner_join(data, keys) %>%
filter(Wavelength >= 500 & Wavelength <= 1000) # Choose relevent wavelengths
## Find REF files for correction factors
ref_data <- df %>%
filter(Treatment == "REF") %>% # extract reference data
separate(Block, into = c("BX1", "BX2", "BX3", "BX4"), sep = ",") %>% # expand string entry in "Block", necessary if different ref for different blocks at same site
gather(Block, BlockString, BX1:BX4) %>% # re-condense into one column
mutate(Block = str_squish(BlockString), BlockString=NULL) %>% # remove whitespace from Block names introduced by "separate" function
filter(!is.na(Block)) # remove empty rows for site w/out B3 or B4
## Summarize 5 chosen ref measurements per DATE/SITE/BLOCK
ref_summary <- ref_data %>%
group_by(Date,Site,Block,Wavelength) %>% # group_by(Date,Site,Block,Wavelength, int) %>%
summarize(ChA_REF = mean(ChA), ChB_REF = mean(ChB), CorrectionFactor_REF = mean(ChA/ChB), int_REF = mean(int), Notes_REF = list(Notes))
## Join DATA with REFS
df_ref <- inner_join(df_tidy, ref_summary) %>%
select(Date, Time, Site, Block, Treatment, Measurement, Wavelength,  int, int_REF, ChB, ChA, ChB_REF, ChA_REF, CorrectionFactor_REF, Weather, Notes, Notes_REF, filename, FileNum, keyname) %>%
mutate(raw = ChB/ChA) %>%
mutate(correct = raw*CorrectionFactor_REF) %>%
gather(Type, Reflectance, raw:correct)
# PLOT SELECTION
sites <-c("MAT", "LMAT", "HST")
blocks <- c("B1")
trtmts <- c(CT)
measures <- c("1", "2", "3", "4", "5")
df_ref
# Data Comparison Format
df_plot <- df_ref %>%
filter(Site %in% sites) %>%
filter(Block %in% blocks) %>%
filter(Treatment %in% trtmts) %>%
group_by(Site, Block, Treatment, Date, Wavelength) %>%
summarize(
avg_reflect = mean(Reflectance),
max_ref = max(Reflectance),
min_ref = min(Reflectance),
sd_reflect = sd(Reflectance)
)
# Color sequences
pur_pal <- RColorBrewer::brewer.pal(5, "Purples")
ggplot(data = df_plot, mapping = aes(x = Wavelength, y = avg_reflect, linetype=Treatment)) +
geom_line(aes(color=Type)) +
geom_ribbon(aes(ymin=avg_reflect-sd_reflect, ymax=avg_reflect+sd_reflect, fill=Type), alpha=0.25) +
facet_grid(Site ~ Date)
ggplot(data = df_plot, mapping = aes(x = Wavelength, y = avg_reflect, linetype=Treatment)) +
geom_line(aes(color=Treatment)) +
geom_ribbon(aes(ymin=avg_reflect-sd_reflect, ymax=avg_reflect+sd_reflect, fill=Type), alpha=0.25) +
facet_grid(Site ~ Date)
ggplot(data = df_plot, mapping = aes(x = Wavelength, y = avg_reflect, linetype=Treatment)) +
geom_line(aes(color=Treatment)) +
geom_ribbon(aes(ymin=avg_reflect-sd_reflect, ymax=avg_reflect+sd_reflect, fill=Treatment), alpha=0.25) +
facet_grid(Site ~ Date)
trtmts <- c(CT, NP)
measures <- c("1", "2", "3", "4", "5")
# Data Comparison Format
df_plot <- df_ref %>%
filter(Site %in% sites) %>%
filter(Block %in% blocks) %>%
filter(Treatment %in% trtmts) %>%
group_by(Site, Block, Treatment, Date, Wavelength) %>%
summarize(
avg_reflect = mean(Reflectance),
max_ref = max(Reflectance),
min_ref = min(Reflectance),
sd_reflect = sd(Reflectance)
)
# Color sequences
pur_pal <- RColorBrewer::brewer.pal(5, "Purples")
ggplot(data = df_plot, mapping = aes(x = Wavelength, y = avg_reflect, linetype=Treatment)) +
geom_line(aes(color=Treatment)) +
geom_ribbon(aes(ymin=avg_reflect-sd_reflect, ymax=avg_reflect+sd_reflect, fill=Treatment), alpha=0.25) +
facet_grid(Site ~ Date)
# PLOT SELECTION
sites <-c("MAT", "LMAT", "HST")
blocks <- c("B1")
trtmts <- c(CT, NP)
measures <- c("1", "2", "3", "4", "5")
# Data Comparison Format
df_plot <- df_ref %>%
filter(Site %in% sites) %>%
filter(Block %in% blocks) %>%
filter(Treatment %in% trtmts) %>%
group_by(Site, Block, Treatment, Date, Wavelength) %>%
summarize(
avg_reflect = mean(Reflectance),
max_ref = max(Reflectance),
min_ref = min(Reflectance),
sd_reflect = sd(Reflectance)
)
# Color sequences
pur_pal <- RColorBrewer::brewer.pal(5, "Purples")
ggplot(data = df_plot, mapping = aes(x = Wavelength, y = avg_reflect, linetype=Treatment)) +
geom_line(aes(color=Treatment)) +
geom_ribbon(aes(ymin=avg_reflect-sd_reflect, ymax=avg_reflect+sd_reflect, fill=Treatment), alpha=0.25) +
facet_grid(Site ~ Date)
NP
trtmts <- c(CT, "NP")
measures <- c("1", "2", "3", "4", "5")
# Data Comparison Format
df_plot <- df_ref %>%
filter(Site %in% sites) %>%
filter(Block %in% blocks) %>%
filter(Treatment %in% trtmts) %>%
group_by(Site, Block, Treatment, Date, Wavelength) %>%
summarize(
avg_reflect = mean(Reflectance),
max_ref = max(Reflectance),
min_ref = min(Reflectance),
sd_reflect = sd(Reflectance)
)
# Color sequences
pur_pal <- RColorBrewer::brewer.pal(5, "Purples")
ggplot(data = df_plot, mapping = aes(x = Wavelength, y = avg_reflect, linetype=Treatment)) +
geom_line(aes(color=Treatment)) +
geom_ribbon(aes(ymin=avg_reflect-sd_reflect, ymax=avg_reflect+sd_reflect, fill=Treatment), alpha=0.25) +
facet_grid(Site ~ Date)
trtmts <- c(CT, "NP", "P")
measures <- c("1", "2", "3", "4", "5")
# Data Comparison Format
df_plot <- df_ref %>%
filter(Site %in% sites) %>%
filter(Block %in% blocks) %>%
filter(Treatment %in% trtmts) %>%
group_by(Site, Block, Treatment, Date, Wavelength) %>%
summarize(
avg_reflect = mean(Reflectance),
max_ref = max(Reflectance),
min_ref = min(Reflectance),
sd_reflect = sd(Reflectance)
)
# Color sequences
pur_pal <- RColorBrewer::brewer.pal(5, "Purples")
ggplot(data = df_plot, mapping = aes(x = Wavelength, y = avg_reflect)) +
geom_line(aes(color=Treatment)) +
geom_ribbon(aes(ymin=avg_reflect-sd_reflect, ymax=avg_reflect+sd_reflect, fill=Treatment), alpha=0.25) +
facet_grid(Site ~ Date)
# SELECTION
sites <-c("DHT")
blocks <- c("B1", "B2", "B3", "B4")
trtmts <- c(CT)
ndvi_types <- df_types %>%
filter(Site %in% sites) %>%
filter(Block %in% blocks) %>%
filter(Treatment %in% trtmts) %>%
calculate_ndvi()
ndvi_plot <- ndvi_types %>%
group_by(Site, Block, Treatment, Measurement, Date, Type) %>%
summarise(
avg_ndvi = mean(ndvi),
sd_ndvi = sd(ndvi)
)
ggplot(data = ndvi_plot, mapping = aes(x = Date, y = avg_ndvi, color = Type,linetype = Treatment)) +
geom_point() +
geom_line() +
geom_errorbar(aes(ymin = avg_ndvi-sd_ndvi, ymax= avg_ndvi + sd_ndvi), width=2) +
# scale_color_manual(values=c("CT" = "black", "CT1"="black", "CT2"="black",
#                             "N" = "blue2", "NO3" = "dodgerblue", "NH4" = "deepskyblue",
#                             "P" = "red2",
#                             "NP" = pur_pal[5],
#                             "F0.5" = pur_pal[1],
#                             "F1" = pur_pal[2],
#                             "F2" = pur_pal[3],
#                             "F5" = pur_pal[4],
#                             "F10" = pur_pal[5]))  +
facet_grid( Measurement ~ Block)
ggplot(data = ndvi_plot, mapping = aes(x = Date, y = avg_ndvi, color = Treatment)) +
geom_point() +
geom_line() +
geom_errorbar(aes(ymin = avg_ndvi-sd_ndvi, ymax= avg_ndvi + sd_ndvi), width=2) +
# scale_color_manual(values=c("CT" = "black", "CT1"="black", "CT2"="black",
#                             "N" = "blue2", "NO3" = "dodgerblue", "NH4" = "deepskyblue",
#                             "P" = "red2",
#                             "NP" = pur_pal[5],
#                             "F0.5" = pur_pal[1],
#                             "F1" = pur_pal[2],
#                             "F2" = pur_pal[3],
#                             "F5" = pur_pal[4],
#                             "F10" = pur_pal[5]))  +
facet_grid( Measurement ~ Block)
ndvi_plot <- ndvi_types %>%
group_by(Site, Block, Treatment, Measurement, Date) %>%
summarise(
avg_ndvi = mean(ndvi),
sd_ndvi = sd(ndvi)
)
ggplot(data = ndvi_plot, mapping = aes(x = Date, y = avg_ndvi, color = Treatment)) +
geom_point() +
geom_line() +
geom_errorbar(aes(ymin = avg_ndvi-sd_ndvi, ymax= avg_ndvi + sd_ndvi), width=2) +
# scale_color_manual(values=c("CT" = "black", "CT1"="black", "CT2"="black",
#                             "N" = "blue2", "NO3" = "dodgerblue", "NH4" = "deepskyblue",
#                             "P" = "red2",
#                             "NP" = pur_pal[5],
#                             "F0.5" = pur_pal[1],
#                             "F1" = pur_pal[2],
#                             "F2" = pur_pal[3],
#                             "F5" = pur_pal[4],
#                             "F10" = pur_pal[5]))  +
facet_grid( Measurement ~ Block)
ndvi_plot <- ndvi_types %>%
group_by(Site, Block, Treatment, Measurement, Date) %>%
summarise(
avg_ndvi = mean(ndvi),
sd_ndvi = sd(ndvi)
)
ndvi_types <- df_types %>%
filter(Site %in% sites) %>%
filter(Block %in% blocks) %>%
filter(Treatment %in% trtmts) %>%
calculate_ndvi()
ndvi_types <- df_ref %>%
filter(Site %in% sites) %>%
filter(Block %in% blocks) %>%
filter(Treatment %in% trtmts) %>%
calculate_ndvi()
ndvi_plot <- ndvi_types %>%
group_by(Site, Block, Treatment, Measurement, Date) %>%
summarise(
avg_ndvi = mean(ndvi),
sd_ndvi = sd(ndvi)
)
ggplot(data = ndvi_plot, mapping = aes(x = Date, y = avg_ndvi, color = Treatment)) +
geom_point() +
geom_line() +
geom_errorbar(aes(ymin = avg_ndvi-sd_ndvi, ymax= avg_ndvi + sd_ndvi), width=2) +
# scale_color_manual(values=c("CT" = "black", "CT1"="black", "CT2"="black",
#                             "N" = "blue2", "NO3" = "dodgerblue", "NH4" = "deepskyblue",
#                             "P" = "red2",
#                             "NP" = pur_pal[5],
#                             "F0.5" = pur_pal[1],
#                             "F1" = pur_pal[2],
#                             "F2" = pur_pal[3],
#                             "F5" = pur_pal[4],
#                             "F10" = pur_pal[5]))  +
facet_grid( Measurement ~ Block)
# SELECTION
sites <-c("MAT")
blocks <- c("B1", "B2", "B3", "B4")
trtmts <- c(CT)
ndvi_types <- df_ref %>%
filter(Site %in% sites) %>%
filter(Block %in% blocks) %>%
filter(Treatment %in% trtmts) %>%
calculate_ndvi()
ndvi_plot <- ndvi_types %>%
group_by(Site, Block, Treatment, Measurement, Date) %>%
summarise(
avg_ndvi = mean(ndvi),
sd_ndvi = sd(ndvi)
)
ggplot(data = ndvi_plot, mapping = aes(x = Date, y = avg_ndvi, color = Treatment)) +
geom_point() +
geom_line() +
geom_errorbar(aes(ymin = avg_ndvi-sd_ndvi, ymax= avg_ndvi + sd_ndvi), width=2) +
# scale_color_manual(values=c("CT" = "black", "CT1"="black", "CT2"="black",
#                             "N" = "blue2", "NO3" = "dodgerblue", "NH4" = "deepskyblue",
#                             "P" = "red2",
#                             "NP" = pur_pal[5],
#                             "F0.5" = pur_pal[1],
#                             "F1" = pur_pal[2],
#                             "F2" = pur_pal[3],
#                             "F5" = pur_pal[4],
#                             "F10" = pur_pal[5]))  +
facet_grid( Measurement ~ Block)
