stocksm %>% spread(stock, price)
## Output Key Table of References
ref_keys <- keys %>%
filter(Treatment == "REF") %>%
select(Date, Site, Block, Treatment, Weather, Notes, FileNum) %>%
spread(FileNum, FileNum)
ref_keys
## Output Key Table of References
ref_keys <- keys %>%
filter(Treatment == "REF") %>%
select(Date, Site, Block, Treatment, Weather, Notes, FileNum) %>%
spread(Measurement, FileNum)
## Output Key Table of References
ref_keys <- keys %>%
filter(Treatment == "REF") %>%
select(Date, Site, Block, Treatment, Weather, Notes, Measurement, FileNum) %>%
spread(Measurement, FileNum)
ref_keys
names(keys)
keys
## Find all file keys
### alter search pattern to choose specific key(s)
key_files <- list.files(path = data_path, pattern = "*_key.csv", full.names = T, recursive = T)
## Read in data from filekeys
key_list <- data_frame(keyname = key_files) %>% # create dataframe
mutate(key_contents = map(keyname, function(x) read_key_file(x)))
## Unpack into usable dataframe
keys <- unnest(key_list)
keys
keys %>% select(keyname) %>% distinct()
## Output Key Table of References
ref_keys <- keys %>%
filter(Treatment == "REF") %>%
mutate(Measurement = str_c("P", Measurement)) %>%
select(Date, Site, Block, Treatment, Weather, Notes, Measurement, FileNum) %>%
spread(Measurement, FileNum)
names(ref_keys)
ref_keys
## Output Key Table of References
ref_keys <- keys %>%
filter(Treatment == "REF") %>%
mutate(Measurement = str_c("P", Measurement)) %>%
select(Date, Site, Block, Treatment, Weather, Notes, Measurement, FileNum) %>%
spread(Measurement, FileNum) %>%
unite(P1:P5, sep=", ")
?dplyr::unite
?tidyr::unite()
## Output Key Table of References
ref_keys <- keys %>%
filter(Treatment == "REF") %>%
mutate(Measurement = str_c("P", Measurement)) %>%
select(Date, Site, Block, Treatment, Weather, Notes, Measurement, FileNum) %>%
spread(Measurement, FileNum) %>%
unite(P1:P5, sep=",")
## Output Key Table of References
ref_keys <- keys %>%
filter(Treatment == "REF") %>%
mutate(Measurement = str_c("P", Measurement)) %>%
select(Date, Site, Block, Treatment, Weather, Notes, Measurement, FileNum) %>%
spread(Measurement, FileNum) %>%
unite(Measurement = P1:P5, sep=",")
## Output Key Table of References
ref_keys <- keys %>%
filter(Treatment == "REF") %>%
mutate(Measurement = str_c("P", Measurement)) %>%
select(Date, Site, Block, Treatment, Weather, Notes, Measurement, FileNum) %>%
spread(Measurement, FileNum) %>%
unite(Measurement, P1:P5, sep=",")
ref_keys
library(knitr)
## Output Key Table of References
ref_keys <- keys %>%
filter(Treatment == "REF") %>%
mutate(Measurement = str_c("P", Measurement)) %>%
select(Date, Site, Block, Treatment, Weather, Notes, Measurement, FileNum) %>%
spread(Measurement, FileNum) %>%
unite(FileNums, P1:P5, sep=",")
kable(ref_keys, caption="White Reference Files")
## Join all data matching keys dataframe (drops any non-matching data),
##  by columns (Date, Site, FileNum)
df <- inner_join(data, keys) %>%
filter(Wavelength >= 500 & Wavelength <= 1000) # Choose relevent wavelengths
summary(df)
summary(df %>% select(Date, Site) %>% distinct())
print(df %>% select(Date, Site) %>% distinct())
kable(df %>% select(Date, Site) %>% distinct())
kable(df %>% select(Date, Site, Block) %>% distinct())
kable(df %>% select(Date, Site, Block, Treatment) %>% distinct())
kable(df %>% select(Date, Site, Treatment) %>% distinct())
kable(df %>% select(Date, Site) %>% distinct(), caption="Dates & Sites")
kable(df %>% select(Date, Site) %>% distinct() %>% unite(Site), caption="Dates & Sites")
kable(df %>% select(Date, Site) %>% distinct() %>% gather(Site), caption="Dates & Sites")
kable(df %>% select(Date, Site) %>% distinct() %>% gather(Site, -Date), caption="Dates & Sites")
kable(df %>% select(Date, Site) %>% distinct() %>% gather(Site, Sites), caption="Dates & Sites")
kable(df %>% select(Date, Site) %>% distinct() %>% gather(Site, Sites, -Date), caption="Dates & Sites")
kable(df %>% select(Date, Site) %>% distinct() %>% gather(Sites, -Date), caption="Dates & Sites")
kable(df %>% select(Date, Site) %>% distinct() %>% gather(Site, -Date), caption="Dates & Sites")
df_table <- df %>%
select(Date, Site) %>%
distinct() %>%
group_by(Date) %>%
summarise(Sites = str_c(Site))
df_table <- df %>%
select(Date, Site) %>%
distinct() %>%
group_by(Date) %>%
summarize(Sites = str_c(Site))
df_table <- df %>%
select(Date, Site) %>%
distinct() %>%
group_by(Date) %>%
summarize(Sites = c(Site))
df_table
df_table <- df %>%
select(Date, Site) %>%
distinct() %>%
group_by(Date) %>%
mutate(Sites = str_c(Site))
df_table
df_table <- df %>%
select(Date, Site) %>%
distinct() %>%
slice_rows("Date") %>%
by_slice(function(x), unlist(x), .to = "vec")
df_table <- df %>%
select(Date, Site) %>%
distinct() %>%
slice_rows("Date")
df_table <- df %>%
select(Date, Site) %>%
distinct() %>%
slice_rows(Date)
library(purr)
df_table <- df %>%
select(Date, Site) %>%
distinct() %>%
group_by(Date) %>%
do(res= c(t(.[,-4])))
df_table <- df %>%
select(Date, Site) %>%
distinct() %>%
group_by(Date) %>%
do(res= c(t(.[,-1])))
df_table
df_table <- df %>%
select(Date, Site) %>%
distinct() %>%
group_by(Date) %>%
do(Sites= c(t(.[,-1]))) %>%
mutate(Sites = unlist(Sites))
mutate(Sites = Sites[[1]]
df_table <- df %>%
df_table <- df %>%
select(Date, Site) %>%
distinct() %>%
group_by(Date) %>%
do(Sites= c(t(.[,-1])))
kable(df_table, caption="Sites by Date")
df_table
?kable
# 2. Join DATA & KEYS --------------------------------------------------------
## Join all data matching keys dataframe (drops any non-matching data),
##  by columns (Date, Site, FileNum)
df <- inner_join(data, keys) %>%
filter(Wavelength >= 500 & Wavelength <= 1000) # Choose relevent wavelengths
df_table <- df %>%
select(Date, Site) %>%
distinct() %>%
group_by(Date) %>%
do(Sites = c(t(.[,-2])))
df_table
df_table <- df %>%
select(Date, Site) %>%
distinct() %>%
group_by(Date) %>%
do(Sites = c(t(.[,-2])))
df_table
kable(df_table, caption="Sites by Date")
df_table <- df %>%
select(Date, Site) %>%
distinct() %>%
group_by(Date) %>%
do(Sites = c(t(.[,-1])))
kable(df_table, caption="Sites by Date")
kable
## Join all data matching keys dataframe (drops any non-matching data),
##  by columns (Date, Site, FileNum)
df <- inner_join(data, keys) %>%
filter(Wavelength >= 500 & Wavelength <= 1000) # Choose relevent wavelengths
df_table <- df %>%
select(Date, Site) %>%
distinct() %>%
group_by(Date) %>%
do(Sites = c(t(.[,-1])))
kable(df_table, caption="Sites by Date")
## Join all data matching keys dataframe (drops any non-matching data),
##  by columns (Date, Site, FileNum)
df <- inner_join(data, keys) %>%
filter(Wavelength >= 500 & Wavelength <= 1000) # Choose relevent wavelengths
df_table <- df %>%
select(Date, Site) %>%
distinct() %>%
group_by(Date) %>%
do(Sites = c(t(.[,-1])))
df_table
df_table <- df %>%
select(Date, Site) %>%
distinct() %>%
group_by(Date) %>%
do(Sites = c(t(.[,-1]))) %>%
mutate(Sites = Sites[1])
df_table
df_table <- df %>%
select(Date, Site) %>%
distinct() %>%
group_by(Date) %>%
do(Sites = c(t(.[,-1]))) %>%
mutate(Sites = as.vector(Sites))
df_table <- df %>%
select(Date, Site) %>%
distinct() %>%
group_by(Date) %>%
do(Sites = c(t(.[,-1]))) %>%
mutate(Sites = str_c(Sites))
df_table <- df %>%
select(Date, Site) %>%
distinct() %>%
group_by(Date) %>%
do(Sites = c(t(.[,-1]))) %>%
mutate(Sites = str_c(Sites[1:length(Sites)]))
df_table <- df %>%
select(Date, Site) %>%
distinct() %>%
group_by(Date) %>%
summarize(Sites = n_distinct(Site))
df_table
df_table <- df %>%
select(Date, Site) %>%
distinct() %>%
group_by(Date) %>%
summarize(Sites_Measured = n_distinct(Site))
df_table
df_table <- df %>%
select(Date, Site) %>%
distinct() %>%
spread(Sites, Date)
df_table <- df %>%
select(Date, Site) %>%
distinct() %>%
spread(Site, Date)
df_table <- df %>%
select(Date, Site) %>%
distinct() %>%
spread(Date, Site)
df_table
df_table <- df %>%
select(Date, Site) %>%
distinct() %>%
group_by(Date) %>%
do(Sites = t(.[-1]))
df_table
df_table <- df %>%
select(Date, Site) %>%
distinct() %>%
group_by(Date) %>%
do(Sites = t(.[-1])) %>%
mutate(Sites = paste( unlist(Sites), collapse=''))
df_table
df_table <- df %>%
select(Date, Site) %>%
distinct() %>%
group_by(Date) %>%
do(Sites = t(.[-1])) %>%
mutate(Sites = paste( unlist(Sites), collapse=','))
df_table
kable(df_table, caption = "Measured Sites by Date")
## Join all data matching keys dataframe (drops any non-matching data),
##  by columns (Date, Site, FileNum)
df <- inner_join(data, keys) %>%
filter(Wavelength >= 500 & Wavelength <= 1000) # Choose relevent wavelengths
df_table <- df %>%
select(Date, Site) %>%
distinct() %>%
group_by(Date) %>%
do(Sites = t(.[-1])) %>%
mutate(Sites = paste( unlist(Sites), collapse=','))
kable(df_table)
## Join all data matching keys dataframe (drops any non-matching data),
##  by columns (Date, Site, FileNum)
df <- inner_join(data, keys) %>%
filter(Wavelength >= 500 & Wavelength <= 1000) # Choose relevent wavelengths
df_table <- df %>%
select(Date, Site) %>%
distinct() %>%
group_by(Date) %>%
do(Sites = t(.[-1])) %>%
mutate(Sites = paste( unlist(Sites), collapse=','))
install.packages("shiny")
install.packages("shiny")
## Find all white reference files
ref_data <- df %>%
filter(str_detect(Treatment, "REF"))%>% # extract reference data
separate(Block, into = c("BX1", "BX2", "BX3", "BX4"), sep = ",") %>% # expand string entry in "Block", necessary if different ref for different blocks at same site
gather(Block, BlockString, BX1:BX4) %>% # re-condense into one column
mutate(Block = str_squish(BlockString), BlockString=NULL) %>% # remove whitespace from Block names introduced by "separate" function
filter(!is.na(Block)) %>% # remove empty rows for site w/out B3 or B4
mutate(CorrectionFactor_REF = ChA/ChB)
## Plot ALL Correction Factors for quality check
ggplot(data = ref_data, mapping = aes(x = Wavelength, y = CorrectionFactor_REF)) +
geom_line(aes(color=Treatment, linetype=Measurement, alpha=Block)) +
facet_grid(Site ~ Date) +
scale_alpha_discrete(range=c(1, 0.5)) # transparency by block
## Find all white reference files
ref_data <- df %>%
filter(str_detect(Treatment, "REF"))%>% # extract reference data
separate(Block, into = c("BX1", "BX2", "BX3", "BX4"), sep = ",") %>% # expand string entry in "Block", necessary if different ref for different blocks at same site
gather(Block, BlockString, BX1:BX4) %>% # re-condense into one column
mutate(Block = str_squish(BlockString), BlockString=NULL) %>% # remove whitespace from Block names introduced by "separate" function
filter(!is.na(Block)) %>% # remove empty rows for site w/out B3 or B4
mutate(CorrectionFactor_REF = ChA/ChB)
## Plot ALL Correction Factors for quality check
ggplot(data = ref_data, mapping = aes(x = Wavelength, y = CorrectionFactor_REF)) +
geom_line(aes(color=Treatment, linetype=Measurement, alpha=Block)) +
facet_grid(Site ~ Date) +
scale_alpha_discrete(range=c(1, 0.5)) # transparency by block
knitr::opts_chunk$set(echo = TRUE)
options(knitr.kable.NA = '')
source("unispec_functions.R") # file loads required packages and functions
library("tidyverse")
## Useful vectors for standardizing names and filtering rows
WSG <- c("WSG1", "WSG23")
SHB <- c("SHB1", "SHB2")
site_list <- list("MAT", "LMAT", "MNAT", "NANT", "DHT", WSG, SHB, "HST")
CT <- c("CT","CT1","CT2")
NP_gradient <- c("F0.5","F1","F2","F5","F10") # for LOF site
N_types <- c("NO3", "NH4") # for LOF site
trtmt_list <- list(CT, "N", "P", "NP", NP_gradient, N_types)
## Join all data matching keys dataframe (drops any non-matching data),
##  by columns (Date, Site, FileNum)
df <- inner_join(data, keys) %>%
filter(Wavelength >= 500 & Wavelength <= 1000) # Choose relevent wavelengths
df_table <- df %>%
select(Date, Site) %>%
distinct() %>%
group_by(Date) %>%
do(Sites = t(.[-1])) %>%
mutate(Sites = paste( unlist(Sites), collapse=','))
knitr::opts_chunk$set(echo = TRUE)
options(knitr.kable.NA = '')
source("unispec_functions.R") # file loads required packages and functions
library("tidyverse")
## Useful vectors for standardizing names and filtering rows
WSG <- c("WSG1", "WSG23")
SHB <- c("SHB1", "SHB2")
site_list <- list("MAT", "LMAT", "MNAT", "NANT", "DHT", WSG, SHB, "HST")
CT <- c("CT","CT1","CT2")
NP_gradient <- c("F0.5","F1","F2","F5","F10") # for LOF site
N_types <- c("NO3", "NH4") # for LOF site
trtmt_list <- list(CT, "N", "P", "NP", NP_gradient, N_types)
kable(df_table)
knitr::opts_chunk$set(echo = TRUE, knitr.kable.NA = ''))
source("unispec_functions.R") # file loads required packages and functions
library("tidyverse")
## Useful vectors for standardizing names and filtering rows
WSG <- c("WSG1", "WSG23")
SHB <- c("SHB1", "SHB2")
site_list <- list("MAT", "LMAT", "MNAT", "NANT", "DHT", WSG, SHB, "HST")
CT <- c("CT","CT1","CT2")
NP_gradient <- c("F0.5","F1","F2","F5","F10") # for LOF site
N_types <- c("NO3", "NH4") # for LOF site
trtmt_list <- list(CT, "N", "P", "NP", NP_gradient, N_types)
library(knitr)
## Output Key Table of References
ref_keys <- keys %>%
filter(Treatment == "REF") %>%
mutate(Measurement = str_c("P", Measurement)) %>%
select(Date, Site, Block, Weather, Notes, Measurement, FileNum) %>%
spread(Measurement, FileNum) %>%
unite(FileNums, P1:P5, sep=",")
kable(ref_keys, caption="White Reference Files")
options(knitr.kable.NA = '')
## Output Key Table of References
ref_keys <- keys %>%
filter(Treatment == "REF") %>%
mutate(Measurement = str_c("P", Measurement)) %>%
select(Date, Site, Block, Weather, Notes, Measurement, FileNum) %>%
spread(Measurement, FileNum) %>%
unite(FileNums, P1:P5, sep=",")
kable(ref_keys, caption="White Reference Files")
options(knitr.kable.NA = '')
## Output Key Table of References
ref_keys <- keys %>%
filter(Treatment == "REF") %>%
mutate(Measurement = str_c("P", Measurement)) %>%
select(Date, Site, Block, Weather, Notes, Measurement, FileNum) %>%
spread(Measurement, FileNum) %>%
unite(FileNums, P1:P5, sep=",")
kable(ref_keys, caption="White Reference Files")
data
?kable
## Find all white reference files
ref_data <- df %>%
filter(str_detect(Treatment, "REF"))%>% # extract reference data
separate(Block, into = c("BX1", "BX2", "BX3", "BX4"), sep = ",") %>% # expand string entry in "Block", necessary if different ref for different blocks at same site
gather(Block, BlockString, BX1:BX4) %>% # re-condense into one column
mutate(Block = str_squish(BlockString), BlockString=NULL) %>% # remove whitespace from Block names introduced by "separate" function
filter(!is.na(Block)) %>% # remove empty rows for site w/out B3 or B4
mutate(CorrectionFactor_REF = ChA/ChB)
## Plot ALL Correction Factors for quality check
cor_factor_plot <- ggplot(data = ref_data, mapping = aes(x = Wavelength, y = CorrectionFactor_REF)) +
geom_line(aes(color=Treatment, linetype=Measurement, alpha=Block)) +
facet_grid(Site ~ Date) +
scale_alpha_discrete(range=c(1, 0.5)) # set transparency by block
cor_factor_plot
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, knitr.kable.NA = '')
source("unispec_functions.R") # file loads required packages and functions
library("tidyverse")
## Useful vectors for standardizing names and filtering data
WSG <- c("WSG1", "WSG23")
SHB <- c("SHB1", "SHB2")
site_list <- list("MAT", "LMAT", "MNAT", "NANT", "DHT", WSG, SHB, "HST")
CT <- c("CT","CT1","CT2")
NP_gradient <- c("F0.5","F1","F2","F5","F10") # for LOF site
N_types <- c("NO3", "NH4") # for LOF site
trtmt_list <- list(CT, "N", "P", "NP", NP_gradient, N_types)
# Chunk 2: directory
data_path  <- "UnispecData/"
## INTERACTIVE CODE
# library("rChoiceDialogs") # for interactively selecting file directories
# data_path <- rchoose.dir(caption = "Select Unispec files directory")
# Chunk 3: key
## Find all file keys
### alter search pattern to choose specific key(s)
key_files <- list.files(path = data_path, pattern = "*_key.csv", full.names = T, recursive = T)
## Read in data from filekeys
key_list <- data_frame(keyname = key_files) %>% # create dataframe
mutate(key_contents = map(keyname, function(x) read_key_file(x)))
# map function: super useful to apply function to objects without slow "for" loops
## Unpack into usable dataframe
keys <- unnest(key_list)
# Chunk 4: spu_data
## Find .spu files
### alter data_path or specify Date(s) or Site(s) to read files
files <- list.files(path = data_path, pattern = ".spu$", full.names = FALSE, recursive=T)
## Read data from files (can take minutes)
data_list <- data_frame(filename = files) %>% # create dataframe
mutate(file_contents = map(filename, function(x) read_spu_file(x)))
## Unpack into usable dataframe
data <- unnest(data_list)
# Chunk 5: join_keys_data
## Join all data matching keys dataframe (drops any non-matching data),
##  by columns (Date, Site, FileNum)
df <- inner_join(data, keys) %>%
filter(Wavelength >= 500 & Wavelength <= 1000) # Choose relevent wavelengths
## Sites per Date table to display
df_table <- df %>%
select(Date, Site) %>%
distinct() %>%
group_by(Date) %>%
do(Sites = t(.[-1])) %>%
mutate(Sites = paste( unlist(Sites), collapse=','))
# Chunk 6: refs
## Find all white reference files
ref_data <- df %>%
filter(str_detect(Treatment, "REF"))%>% # extract reference data
separate(Block, into = c("BX1", "BX2", "BX3", "BX4"), sep = ",") %>% # expand string entry in "Block", necessary if different ref for different blocks at same site
gather(Block, BlockString, BX1:BX4) %>% # re-condense into one column
mutate(Block = str_squish(BlockString), BlockString=NULL) %>% # remove whitespace from Block names introduced by "separate" function
filter(!is.na(Block)) %>% # remove empty rows for site w/out B3 or B4
mutate(CorrectionFactor_REF = ChA/ChB)
## Plot ALL Correction Factors for quality check
cor_factor_plot <- ggplot(data = ref_data, mapping = aes(x = Wavelength, y = CorrectionFactor_REF)) +
geom_line(aes(color=Treatment, linetype=Measurement, alpha=Block)) +
facet_grid(Site ~ Date) +
scale_alpha_discrete(range=c(1, 0.5)) # set transparency by block
cor_factor_plot
# Chunk 7: check_refs
check_site <- "LMAT"
## Choose references (usually 5 measurements per date/site)
sites <- unlist(site_list)
sites <- sites[which(!(sites %in% c("MNAT", "SHB1")))] # not MNAT or SHB1
dates <- df %>% select(Date) %>% unique() %>% slice(1:n()) %>% c()
dates <- dates[[1]]
ref_check <- ref_data %>%
filter(Date %in% dates) %>%
filter(Site %in% sites)  %>%
### FURTHER SPECIFY EXACT SITE/DATE/ETC to INVESTIGATE FURTHER
filter(Site == site_check)
## Replot Specified Correction Factors for quality check
ggplot(data = ref_check, mapping = aes(x = Wavelength, y = CorrectionFactor_REF)) +
geom_line(aes(color=Treatment, linetype=Measurement, alpha=Block)) +
facet_grid(Site ~ Date) +
scale_alpha_discrete(range=c(1, 0.25))
## EXAMINE SPECIFIC info: check Integration, Notes, Weather, filename, etc.
ref_check_files <- ref_check %>%
select(-c(Wavelength, ChA, ChB, CorrectionFactor_REF, keyname, Time)) %>%
unique()
### View dataframe of ref_check_files
kable(ref_check_files)
# Chunk 8: ref_table
options(knitr.kable.NA = '')
## Output Key Table of References
ref_keys <- keys %>%
filter(Treatment == "REF") %>%
mutate(Measurement = str_c("P", Measurement)) %>%
select(Date, Site, Block, Weather, Notes, Measurement, FileNum) %>%
spread(Measurement, FileNum) %>%
unite(FileNums, P1:P5, sep=",")
kable(ref_keys, caption="White Reference Files")
# Chunk 9: qaqc
plot(pressure)
