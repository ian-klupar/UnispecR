df <- inner_join(keys, data) %>%
filter(!(Treatment %in% c("REF", "DARK"))) %>% # Exclude the reference & dark
filter(Wavelength >=400 & Wavelength <= 1100) # Choose relevant wavelengths
head(df)
df_tidy <- df %>%
select(-(filename, keyname)) %>%
filter(!(Treatment %in% c("REF", "DARK"))) %>% # Exclude the reference & dark
filter(Wavelength >=400 & Wavelength <= 1100) # Choose relevant wavelengths
df_tidy <- df %>%
select(-c(filename, keyname)) %>%
filter(!(Treatment %in% c("REF", "DARK"))) %>% # Exclude the reference & dark
filter(Wavelength >=400 & Wavelength <= 1100) # Choose relevant wavelengths
head(df_tidy)
df_tidy <- df_tidy %>%
mutate(Site = replace(Site, Site %in% WSG, "WSG")) %>%
mutate(Site = replace(Site, Site %in% SHB, "SHB"))
# Useful vectors for filtering rows
WSG <- c("WSG1", "WSG23")
SHB <- c("SHB1", "SHB2")
site_list <- list("MAT", "LMAT", "MNAT", "NANT", "DHT", WSG, SHB, "HST")
CT <- c("CT","CT1","CT2")
N <- c("N", "NO3", "NH4")
NP <- c("F0.5","F1","F2","F5","F10","NP")
trtmt_list <- list(CT, N, "P", NP)
df_tidy <- df_tidy %>%
mutate(Site = replace(Site, Site %in% WSG, "WSG")) %>%
mutate(Site = replace(Site, Site %in% SHB, "SHB"))
head(df_tidy)
# Color sequences
pur_pal <- RColorBrewer::brewer.pal(5, "Purples")
####UNFISIHED
# SELECTION
sites <-c("SHB")
blocks <- c("B1", "B2")
trtmts <- c(NP, CT, N, "P")
types <- c("correct")
# Plotting Format
plotdata <- tidydata %>%
filter(Site %in% sites) %>%
filter(Block %in% blocks) %>%
filter(Treatment %in% trtmts) %>%
filter(Type %in% types) %>%
group_by(Site, Block, Treatment, Date, Wavelength) %>%
summarize(
reflect = mean(Reflectance),
max_ref = max(Reflectance),
min_ref = min(Reflectance))
tidydata <- df_tidy %>%
mutate(Site = replace(Site, Site %in% WSG, "WSG")) %>%
mutate(Site = replace(Site, Site %in% SHB, "SHB"))
# Color sequences
pur_pal <- RColorBrewer::brewer.pal(5, "Purples")
####UNFISIHED
# SELECTION
sites <-c("SHB")
blocks <- c("B1", "B2")
trtmts <- c(NP, CT, N, "P")
types <- c("correct")
# Plotting Format
plotdata <- tidydata %>%
filter(Site %in% sites) %>%
filter(Block %in% blocks) %>%
filter(Treatment %in% trtmts) %>%
filter(Type %in% types) %>%
group_by(Site, Block, Treatment, Date, Wavelength) %>%
summarize(
reflect = mean(Reflectance),
max_ref = max(Reflectance),
min_ref = min(Reflectance))
# Actual Plot
ggplot(data = plotdata, mapping = aes(x = Wavelength, y = reflect)) +
geom_ribbon(aes(ymin=min_ref, ymax=max_ref, fill=Treatment), alpha=0.25) +
geom_line(aes(color=Treatment)) +
facet_grid(Block ~ Date) +
scale_color_manual(values=c("CT" = "black", "CT1"="black", "CT2"="black",
"N" = "blue2", "NO3" = "dodgerblue", "NH4" = "deepskyblue",
"P" = "red2",
"NP" = pur_pal[5],
"F0.5" = pur_pal[1],
"F1" = pur_pal[2],
"F2" = pur_pal[3],
"F5" = pur_pal[4],
"F10" = pur_pal[5]))  +
scale_fill_manual(values=c("CT" = "black", "CT1"="black", "CT2"="black",
"N" = "blue2", "NO3" = "dodgerblue", "NH4" = "deepskyblue",
"P" = "red2",
"NP" = pur_pal[5],
"F0.5" = pur_pal[1],
"F1" = pur_pal[2],
"F2" = pur_pal[3],
"F5" = pur_pal[4],
"F10" = pur_pal[5]))
head(plotdata)
Site
####UNFISIHED
# SELECTION
sites <-c("SHB")
blocks <- c("B1", "B2")
trtmts <- c(NP, CT, N, "P")
types <- c("correct")
head(tidydata)
tail(tidydata)
tidydata %>% filter(Site=="SHB")
tidydata %>% filter(Site=="SHB1")
tidydata %>% filter(Site=="SHB2")
factor(tidydata$Site)
factor(df_tidy$Site)
df_tidy <- df %>%
select(-c(filename, keyname)) %>%
filter(!(Treatment %in% c("REF", "DARK"))) %>% # Exclude the reference & dark
filter(Wavelength >=400 & Wavelength <= 1100) # Choose relevant wavelengths
factor(df_tidy$Site)
head(data)
factor(data$Site)
levels(factor(df$Site))
keys$Site
levels(factor(keys$Site))
# REQUIRED PACKAGES -------------------------------------------------------
require(tidyverse)
require(stringr)
require(lubridate)
# Directory -----------------------------------------------------------
prefix <- "/Users/toolik/Dropbox/Toolik-Summer-data/Toolik2017/Unispec/UnispecData"
folder <- "/Unispec1"
data_path <- prefix # paste0(prefix, folder)
read_multispec_file <- function(multi_file) {
## Reads single multispec generated file
## Parses file name for usable info, format: SITE-{YEAR-MONTH-DAY}-TYPE.csv
## Reads in metadata from first 5 lines
## Reads in reflectance data (400-1100nm Wavelengths) from following lines
type <- str_extract(multi_file, "reflec|correct")
date <- ymd(str_extract(multi_file, "[\\d]{4}[-][\\d]+[-][\\d]+"))
meta <- read_lines(multi_file, n_max=5, skip=0)
### Comma separated values:
## Line 1 - reference files (if corrected)
## Line 2 - list of .spu files.
## Line 3 - date # NOT ACCURATE
## Line 4 - time # NOT ACCURATE, multispec does something weird to times. In raw .spu files, they are accurate.
## Line 5 - temp / wind? # NOT USED
ref_files <- str_split(meta[1], pattern=",")[[1]]
spu_files <- str_split(meta[2], pattern=",")[[1]][-1] #Unlist & remove "Wavelength" to get list of data files
dates <- str_trim(str_split(meta[3], pattern=",")[[1]][-1])
times <- str_split(meta[4], pattern=",")[[1]][-1]
## Parsing file name into variables, tag with type, remove .spu
site_fileNum_type_date <- str_c(gsub("*.spu", "", spu_files), type, date, sep = "_")
## Read in what the file looks like, metadata in column name
multi_file_df <- read_csv(file = multi_file, skip = 6,
col_names = c("Wavelength", site_fileNum_type_date),
col_types = cols(
.default = col_double(),
Wavelength = col_integer()))
## Tidy up data frame
tidy_df <- multi_file_df %>%
gather(-Wavelength, key = "site_num_type", value = "Reflectance") %>%
separate(site_num_type, into = c("Site", "FileNum", "Type", "Date"), sep = "_", convert = T) %>%
mutate(Date = ymd(Date))
return(tidy_df)
}
read_key_file <- function(key_file) {
# Read in format of .csv
key_csv <- read_csv(file = key_file, col_names = T,
col_types = cols(
Site = col_character(),
Block = col_character(),
Treatment = col_character(),
Date = col_character(),
Measurement1 = col_integer(),
Measurement2 = col_integer(),
Measurement3 = col_integer(),
Measurement4 = col_integer(),
Measurement5 = col_integer()
))
# Consolidate measurements to tidy dataframe
key_df <- key_csv %>%
gather(Measurement, FileNum, Measurement1:Measurement5) %>%
filter(!is.na(FileNum)) %>%
mutate(Measurement = str_sub(Measurement, 12, 12)) %>%
mutate(Date = lubridate::mdy(Date))
return(key_df)
}
# Find all file keys
key_files <- list.files(path = data_path, pattern = "*_key.csv*", full.names = T, recursive = T)
# Read in filekeys
key_list <- data_frame(keyname = key_files) %>% # create dataframe
mutate(key_contents = map(keyname, function(x) read_key_file(x)))
keys <- unnest(key_list)
# Create file lists (SITE-YEAR-MONTH-DAY-multispecstate.csv)
reflec_files <- list.files(path = data_path, pattern = "*-reflec.csv*", full.names = T, recursive = T)
correct_files <- list.files(path = data_path, pattern = "*-correct.csv*", full.names = T, recursive = T)
files <- c(reflec_files, correct_files)
data_list <- data_frame(filename = files) %>% # create dataframe
mutate(file_contents = map(filename, function(x) read_multispec_file(x)))
data <- unnest(data_list)
## Join to File Key to get block, treatment, measurement
df <- inner_join(keys, data)
df_tidy <- df %>%
select(-c(filename, keyname)) %>%
filter(!(Treatment %in% c("REF", "DARK"))) %>% # Exclude the reference & dark
filter(Wavelength >=400 & Wavelength <= 1100) # Choose relevant wavelengths
# Useful vectors for filtering rows
WSG <- c("WSG1", "WSG23")
SHB <- c("SHB1", "SHB2")
site_list <- list("MAT", "LMAT", "MNAT", "NANT", "DHT", WSG, SHB, "HST")
CT <- c("CT","CT1","CT2")
N <- c("N", "NO3", "NH4")
NP <- c("F0.5","F1","F2","F5","F10","NP")
trtmt_list <- list(CT, N, "P", NP)
tidydata <- df_tidy %>%
mutate(Site = replace(Site, Site %in% WSG, "WSG")) %>%
mutate(Site = replace(Site, Site %in% SHB, "SHB"))
# Color sequences
pur_pal <- RColorBrewer::brewer.pal(5, "Purples")
####UNFISIHED
# SELECTION
sites <-c("SHB")
blocks <- c("B1", "B2")
trtmts <- c(NP, CT, N, "P")
types <- c("correct")
# Plotting Format
plotdata <- tidydata %>%
filter(Site %in% sites) %>%
filter(Block %in% blocks) %>%
filter(Treatment %in% trtmts) %>%
filter(Type %in% types) %>%
group_by(Site, Block, Treatment, Date, Wavelength) %>%
summarize(
reflect = mean(Reflectance),
max_ref = max(Reflectance),
min_ref = min(Reflectance))
# Actual Plot
ggplot(data = plotdata, mapping = aes(x = Wavelength, y = reflect)) +
geom_ribbon(aes(ymin=min_ref, ymax=max_ref, fill=Treatment), alpha=0.25) +
geom_line(aes(color=Treatment)) +
facet_grid(Block ~ Date) +
scale_color_manual(values=c("CT" = "black", "CT1"="black", "CT2"="black",
"N" = "blue2", "NO3" = "dodgerblue", "NH4" = "deepskyblue",
"P" = "red2",
"NP" = pur_pal[5],
"F0.5" = pur_pal[1],
"F1" = pur_pal[2],
"F2" = pur_pal[3],
"F5" = pur_pal[4],
"F10" = pur_pal[5]))  +
scale_fill_manual(values=c("CT" = "black", "CT1"="black", "CT2"="black",
"N" = "blue2", "NO3" = "dodgerblue", "NH4" = "deepskyblue",
"P" = "red2",
"NP" = pur_pal[5],
"F0.5" = pur_pal[1],
"F1" = pur_pal[2],
"F2" = pur_pal[3],
"F5" = pur_pal[4],
"F10" = pur_pal[5]))
head(plotdata)
####UNFISIHED
# SELECTION
sites <-c("WSG")
blocks <- c("B1", "B2")
trtmts <- c(NP, CT, N, "P")
types <- c("correct")
# Plotting Format
plotdata <- tidydata %>%
filter(Site %in% sites) %>%
filter(Block %in% blocks) %>%
filter(Treatment %in% trtmts) %>%
filter(Type %in% types) %>%
group_by(Site, Block, Treatment, Date, Wavelength) %>%
summarize(
reflect = mean(Reflectance),
max_ref = max(Reflectance),
min_ref = min(Reflectance))
# Actual Plot
ggplot(data = plotdata, mapping = aes(x = Wavelength, y = reflect)) +
geom_ribbon(aes(ymin=min_ref, ymax=max_ref, fill=Treatment), alpha=0.25) +
geom_line(aes(color=Treatment)) +
facet_grid(Block ~ Date) +
scale_color_manual(values=c("CT" = "black", "CT1"="black", "CT2"="black",
"N" = "blue2", "NO3" = "dodgerblue", "NH4" = "deepskyblue",
"P" = "red2",
"NP" = pur_pal[5],
"F0.5" = pur_pal[1],
"F1" = pur_pal[2],
"F2" = pur_pal[3],
"F5" = pur_pal[4],
"F10" = pur_pal[5]))  +
scale_fill_manual(values=c("CT" = "black", "CT1"="black", "CT2"="black",
"N" = "blue2", "NO3" = "dodgerblue", "NH4" = "deepskyblue",
"P" = "red2",
"NP" = pur_pal[5],
"F0.5" = pur_pal[1],
"F1" = pur_pal[2],
"F2" = pur_pal[3],
"F5" = pur_pal[4],
"F10" = pur_pal[5]))
# Actual Plot
ggplot(data = plotdata, mapping = aes(x = Wavelength, y = reflect)) +
#geom_ribbon(aes(ymin=min_ref, ymax=max_ref, fill=Treatment), alpha=0.25) +
geom_line(aes(color=Treatment)) +
facet_grid(Block ~ Date) +
scale_color_manual(values=c("CT" = "black", "CT1"="black", "CT2"="black",
"N" = "blue2", "NO3" = "dodgerblue", "NH4" = "deepskyblue",
"P" = "red2",
"NP" = pur_pal[5],
"F0.5" = pur_pal[1],
"F1" = pur_pal[2],
"F2" = pur_pal[3],
"F5" = pur_pal[4],
"F10" = pur_pal[5]))  +
scale_fill_manual(values=c("CT" = "black", "CT1"="black", "CT2"="black",
"N" = "blue2", "NO3" = "dodgerblue", "NH4" = "deepskyblue",
"P" = "red2",
"NP" = pur_pal[5],
"F0.5" = pur_pal[1],
"F1" = pur_pal[2],
"F2" = pur_pal[3],
"F5" = pur_pal[4],
"F10" = pur_pal[5]))
####UNFISIHED
# SELECTION
sites <-c("SHB")
blocks <- c("B1", "B2")
trtmts <- c(NP, CT, N, "P")
types <- c("correct")
# Plotting Format
plotdata <- tidydata %>%
filter(Site %in% sites) %>%
filter(Block %in% blocks) %>%
filter(Treatment %in% trtmts) %>%
filter(Type %in% types) %>%
group_by(Site, Block, Treatment, Date, Wavelength) %>%
summarize(
reflect = mean(Reflectance),
max_ref = max(Reflectance),
min_ref = min(Reflectance))
head(data)
summary(data)
summary(data_list)
data_list
head(tidydata)
tidydata %>% filter(Site == "SHB")
head(data)
SHB
df_tidy %>% filter(Site=="SHB1")
df_tidy %>% filter(Site=="SHB2")
head(df_tidy)
df_tidy %>% filter(Site=="SHB1")
df_tidy %>% filter(Site=="SHB2")
df %>% filter(Site=="SHB2")
df %>% filter(Site=="SHB1")
df
data
View(data_list)
View(data_list)
View(data)
shiny::runApp('C:/Users/toolik/Dropbox/Toolik-Summer-data/Toolik2018/Unispec/shiny_unispec')
runApp('C:/Users/toolik/Dropbox/Toolik-Summer-data/Toolik2018/Unispec/shiny_unispec')
runApp('C:/Users/toolik/Dropbox/Toolik-Summer-data/Toolik2018/Unispec/shiny_unispec')
runApp('C:/Users/toolik/Dropbox/Toolik-Summer-data/Toolik2018/Unispec/shiny_unispec')
runApp('C:/Users/toolik/Dropbox/Toolik-Summer-data/Toolik2018/Unispec/shiny_unispec')
runApp('C:/Users/toolik/Dropbox/Toolik-Summer-data/Toolik2018/Unispec/shiny_unispec')
shiny::runApp('C:/Users/toolik/Dropbox/Toolik-Summer-data/Toolik2018/Unispec/shiny_unispec')
library('tidyverse')
library('stringr')
read_spu_file <- function(fileName) {
# Read metadata from first 9 lines of .spu file
text <- read_lines(fileName, n_max = 9)
# Get info from filename
fileInfo <- str_split(text[1], pattern = c('\\\\'))[[1]]
# works when files saved in default location on PCMIA card, not otherwise
# Read spectral intensity data into dataframe
data <- read.table(file = fileName, skip = 9, col.names = c("Wavelength", "ChB", "ChA")) %>%
mutate(Reflectance = ChB/ChA)
# Tag with appropriate metadata
data$Site <- str_extract(fileName, "(?<=/)(.*?)(?=_)") # get string after / & before _
# for fileName format "DATE/SITE_FILENUM.spu", e.g. "04AUG2017/DHT_00000.spu"
data$FileNum <- as.integer(str_extract(fileName, "[0-9]{5}"))
data$Time <-  lubridate::mdy_hms(str_extract(text[3], "\\d+/\\d+/\\d{4}\\s\\d+:\\d{2}:\\d{2}\\s(PM|AM)"), tz="America/Anchorage")
data$Date <- lubridate::date(data$Time)
# lubridate::dmy(fileInfo[4]) # works when files saved in default location on PCMIA card
data$int <- as.numeric(strsplit(text[8], split = " ")[[1]][3])
data$Temp <- as.numeric(strsplit(strsplit(text[5], split = " ")[[1]][4], split="=")[[1]][2])
return(data)
}
# QUALITY CONTROL ------------------------------------------------------------
folder <- "C:/Users/toolik/Dropbox/Toolik-Summer-data/Toolik2018/Unispec/UnispecData/Unispec6/"
setwd(folder)
# Specify which site and what filenumbers you want to analyze
siteID <- "MNAT*" #regular expression for which files you want
first <- 0
last <- 300
fileList <- list.files(path = folder, pattern = siteID, full.names = FALSE, recursive=T)
fileNums <- as.numeric(gsub("^.*_([0-9]+)\\..*","\\1", fileList))
subfileNums <- fileNums >= first & fileNums <= last
files <- fileList[subfileNums]
# Read in Data
data_list <- data_frame(filename = files) %>% # create dataframe
mutate(file_contents = map(filename, function(x) read_spu_file(x)))
data <- unnest(data_list)
# Select columns to Check
timedata <- data %>% select(Site, Date, FileNum, Time, int) %>%
group_by(Time) %>% distinct()
timedata$diff <- timedata$Time - lag(timedata$Time)
time_check <- timedata %>% select(Site, Time, FileNum, diff, int)
time_check
## PLOT
plotdata <- data %>%
filter(Wavelength > 400 & Wavelength < 1100)
ggplot(data=plotdata, aes(x=Wavelength, y=Reflectance)) +
geom_line() +
facet_wrap(~FileNum)
first <- 80
last <- 100
fileList <- list.files(path = folder, pattern = siteID, full.names = FALSE, recursive=T)
fileNums <- as.numeric(gsub("^.*_([0-9]+)\\..*","\\1", fileList))
subfileNums <- fileNums >= first & fileNums <= last
files <- fileList[subfileNums]
# Read in Data
data_list <- data_frame(filename = files) %>% # create dataframe
mutate(file_contents = map(filename, function(x) read_spu_file(x)))
data <- unnest(data_list)
# Select columns to Check
timedata <- data %>% select(Site, Date, FileNum, Time, int) %>%
group_by(Time) %>% distinct()
timedata$diff <- timedata$Time - lag(timedata$Time)
time_check <- timedata %>% select(Site, Time, FileNum, diff, int)
time_check
## PLOT
plotdata <- data %>%
filter(Wavelength > 400 & Wavelength < 1100) %>%
filter(FileNum > 0 & FileNum < 20)
ggplot(data=plotdata, aes(x=Wavelength, y=Reflectance)) +
geom_line() +
facet_wrap(~FileNum)
## PLOT
plotdata <- data %>%
filter(Wavelength > 400 & Wavelength < 1100) %>%
filter(FileNum > 0 & FileNum < 20)
ggplot(data=plotdata, aes(x=Wavelength, y=Reflectance)) +
geom_line() +
facet_wrap(~FileNum)
plotdata
data
## PLOT
plotdata <- data %>%
filter(Wavelength > 400 & Wavelength < 1100) %>%
filter(FileNum > 0 & FileNum < 100)
plotdata
## PLOT
plotdata <- data %>%
filter(Wavelength > 400 & Wavelength < 1100) %>%
filter(FileNum > 0 & FileNum < 10)
plotdata
first <- 0
last <- 300
fileList <- list.files(path = folder, pattern = siteID, full.names = FALSE, recursive=T)
fileNums <- as.numeric(gsub("^.*_([0-9]+)\\..*","\\1", fileList))
subfileNums <- fileNums >= first & fileNums <= last
files <- fileList[subfileNums]
# Read in Data
data_list <- data_frame(filename = files) %>% # create dataframe
mutate(file_contents = map(filename, function(x) read_spu_file(x)))
data <- unnest(data_list)
# Select columns to Check
timedata <- data %>% select(Site, Date, FileNum, Time, int) %>%
group_by(Time) %>% distinct()
timedata$diff <- timedata$Time - lag(timedata$Time)
time_check <- timedata %>% select(Site, Time, FileNum, diff, int)
time_check
## PLOT
plotdata <- data %>%
filter(Wavelength > 400 & Wavelength < 1100) %>%
filter(FileNum > 0 & FileNum < 10)
ggplot(data=plotdata, aes(x=Wavelength, y=Reflectance)) +
geom_line() +
facet_wrap(~FileNum)
## PLOT
plotdata <- data %>%
filter(Wavelength > 400 & Wavelength < 1100) %>%
filter(FileNum >= 0 & FileNum < 10)
ggplot(data=plotdata, aes(x=Wavelength, y=Reflectance)) +
geom_line() +
facet_wrap(~FileNum)
## PLOT
plotdata <- data %>%
filter(Wavelength > 400 & Wavelength < 1100) %>%
filter(FileNum >= 0 & FileNum < 20)
ggplot(data=plotdata, aes(x=Wavelength, y=Reflectance)) +
geom_line() +
facet_wrap(~FileNum)
## PLOT
plotdata <- data %>%
filter(Wavelength > 400 & Wavelength < 1100) %>%
filter(FileNum >= 80 & FileNum < 100)
ggplot(data=plotdata, aes(x=Wavelength, y=Reflectance)) +
geom_line() +
facet_wrap(~FileNum)
View(time_check)
## PLOT
plotdata <- data %>%
filter(Wavelength > 400 & Wavelength < 1100) %>%
filter(FileNum >= 0 & FileNum < 100)
ggplot(data=plotdata, aes(x=Wavelength, y=Reflectance)) +
geom_line() +
facet_wrap(~FileNum)
## PLOT
plotdata <- data %>%
filter(Wavelength > 400 & Wavelength < 1100) %>%
filter(FileNum >= 10 & FileNum < 100)
ggplot(data=plotdata, aes(x=Wavelength, y=Reflectance)) +
geom_line() +
facet_wrap(~FileNum)
shiny::runApp('C:/Users/toolik/Dropbox/Toolik-Summer-data/Toolik2018/Unispec/shiny_unispec')
load("unispec_index_summary_dataframe.Rda") #load dataframe "index_data"
